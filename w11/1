#include <time.h>
#include <stdio.h>
#include <stdlib.h>

struct Date
{
    int year;
    int month;
    int day;
};


struct LN {
    int id;             // lotto id
    struct Date date;   // opening date
    int num[6];         // winning numbers
    struct LN *nextPtr;
};

//typedef struct listNode ListNode; /* synonym for struct listNode */
typedef LN *LNPtr; /* synonym for ListNode* */

/* prototypes */
void insert( LNPtr *sPtr, char value );
char del( LNPtr *sPtr, char value );
int isEmpty( LNPtr sPtr );
void printList( LNPtr currentPtr );
void instructions( void );

int main( void )
{
   LNPtr startPtr = NULL;                                               /* initially there are no nodes */
   int id;
   int choice;                                                          /* user's choice */
   char item;                                                           /* char entered by user */
   instructions();                                                      /* display the menu */
   printf( "? " );
   scanf( "%d", &choice );
                                                                        /* loop while user does not choose 3 */
   while ( choice != 3 ) {

      switch ( choice ) {
         case 1:
            insert( &startPtr );                                  /* insert item in list */
            printList( startPtr );
            break;
         case 2:
                                                                        /* if list is not empty */
            if ( !isEmpty( startPtr ) ) {
               printf( "Enter character to be deleted: " );
               scanf( "\n%c", &item );
                                                                        /* if character is found, remove it */
               if ( del( &startPtr, item ) ) {                          /* remove item */
                  printf( "%c deleted.\n", item );
                  printList( startPtr );
               }else {                                                  /* end if */
                printf( "%c not found.\n\n", item );
               }                                                        /* end else */
            }else{                                                      /* end if */
               printf( "List is empty.\n\n" );
            }                                                           /* end else */
            break;
         default:
            printf( "Invalid choice.\n\n" );
            instructions();
            break;
      }                                                                 /* end switch */
      printf( " " );
      scanf( "%d", &choice );
   }                                                                    /* end while */
   printf( "End of run.\n" );
   return 0;                                                            /* indicates successful termination */
}                                                                       /* end main */
                                                                        /* display program instructions to user */
void instructions( void )
{
   printf( "Enter your choice:\n"
      "   1 to insert an element into the list.\n"
      "   2 to delete an element from the list.\n"
      "   3 to end.\n" );
}                                                                       /* end function instructions */
                                                                        /* Insert a new value into the list in sorted order */
void insert( LN **sPtr )
{
   LNPtr newPtr;                                                        /* pointer to new node */
   LNPtr previousPtr;                                                   /* pointer to previous node in list */
   LNPtr currentPtr;                                                    /* pointer to current node in list */
   char value;
   newPtr = (LN *) malloc( sizeof( LN ) );                  /* create node */

   if ( newPtr != NULL ) {                                              /* is space available */
                                          /* node does not link to another node */
        printf( "Enter ID: " );
        scanf( "\n", &newPtr->id);
        printf("Enter the year:\n");
        scanf("%d",&newPtr->date.year);
        printf("Enter the month:");
        scanf("\n%d",&newPtr->date.month);
        printf("Enter the date:");
        scanf("\n%d",&newPtr->date.date);
      newPtr->date = value;                                             /* place value in node */
      newPtr->nextPtr = NULL;
      previousPtr = NULL;
      currentPtr = *sPtr;
                                                                        /* loop to find the correct location in the list */
      while ( currentPtr != NULL && value > currentPtr->data ) {
         previousPtr = currentPtr;                                      /* walk to ...   */
         currentPtr = currentPtr->nextPtr;                              /* ... next node */
      }                                                                 /* end while */

                                                                        /* insert new node at beginning of list */
      if ( previousPtr == NULL ) {
         newPtr->nextPtr = *sPtr;
         *sPtr = newPtr;
      }                                                                 /* end if */
      else {                                                            /* insert new node between previousPtr and currentPtr */
         previousPtr->nextPtr = newPtr;
         newPtr->nextPtr = currentPtr;
      }                                                                 /* end else */
   }                                                                    /* end if */
   else {
      printf( "%c not inserted. No memory available.\n", value );
   }                                                                    /* end else */
}                                                                       /* end function insert */
                                                                        /* Delete a list element */
char del( LNPtr *sPtr, char value )
{
   LNPtr previousPtr;                                                   /* pointer to previous node in list */
   LNPtr currentPtr;                                                    /* pointer to current node in list */
   LNPtr tempPtr;                                                       /* temporary node pointer */
                                                                        /* delete first node */
   if ( value == ( *sPtr )->data ) {
      tempPtr = *sPtr;                                                  /* hold onto node being removed */
      *sPtr = ( *sPtr )->nextPtr;                                       /* de-thread the node */
      free( tempPtr );                                                  /* free the de-threaded node */
      return value;
   }                                                                    /* end if */
   else {
      previousPtr = *sPtr;
      currentPtr = ( *sPtr )->nextPtr;
                                                                        /* loop to find the correct location in the list */
      while ( currentPtr != NULL && currentPtr->data != value ) {
         previousPtr = currentPtr;                                      /* walk to ...   */
         currentPtr = currentPtr->nextPtr;                              /* ... next node */
      }                                                                 /* end while */
                                                                        /* delete node at currentPtr */
      if ( currentPtr != NULL ) {
         tempPtr = currentPtr;
         previousPtr->nextPtr = currentPtr->nextPtr;
         free( tempPtr );
         return value;
      }                                                                 /* end if */
   }                                                                    /* end else */

   return '\0';
}                                                                       /* end function delete */

                                                                        /* Return 1 if the list is empty, 0 otherwise */
int isEmpty( LNPtr sPtr )
{
   return sPtr == NULL;                                                 /* end function isEmpty */
}                                                                       /* Print the list */
void printList( LNPtr currentPtr )
{
   if ( currentPtr == NULL ) {                                          /* if list is empty */
      printf( "List is empty.\n\n" );
   } else {                                                             /* end if */
      printf( "The list is:\n" );                                       /* while not the end of the list */
      while ( currentPtr != NULL ) {
         printf( "%c --> ", currentPtr->data );
         currentPtr = currentPtr->nextPtr;}                             /* end while */
         printf( "NULL\n\n" );
   }                                                                    /* end else */
}                                                                       /* end function printList */

